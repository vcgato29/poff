<?php

/**
 * BaseProductGroup
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property string $title
 * @property string $slug
 * @property string $description
 * @property string $picture
 * @property string $picture_inactive
 * @property string $meta_title
 * @property string $meta_description
 * @property string $meta_keywords
 * @property string $name
 * @property string $import_code
 * @property integer $pri
 * @property string $parameter
 * @property Doctrine_Collection $BannerGroups
 * @property Doctrine_Collection $StructureProductGroup
 * @property Doctrine_Collection $Products
 * @property Doctrine_Collection $ProductGroupParameterGroups
 *
 * @method string              getTitle()                       Returns the current record's "title" value
 * @method string              getSlug()                        Returns the current record's "slug" value
 * @method string              getDescription()                 Returns the current record's "description" value
 * @method string              getPicture()                     Returns the current record's "picture" value
 * @method string              getPictureInactive()             Returns the current record's "picture_inactive" value
 * @method string              getMetaTitle()                   Returns the current record's "meta_title" value
 * @method string              getMetaDescription()             Returns the current record's "meta_description" value
 * @method string              getMetaKeywords()                Returns the current record's "meta_keywords" value
 * @method string              getName()                        Returns the current record's "name" value
 * @method string              getImportCode()                  Returns the current record's "import_code" value
 * @method integer             getPri()                         Returns the current record's "pri" value
 * @method string              getParameter()                   Returns the current record's "parameter" value
 * @method Doctrine_Collection getBannerGroups()                Returns the current record's "BannerGroups" collection
 * @method Doctrine_Collection getStructureProductGroup()       Returns the current record's "StructureProductGroup" collection
 * @method Doctrine_Collection getProducts()                    Returns the current record's "Products" collection
 * @method Doctrine_Collection getProductGroupParameterGroups() Returns the current record's "ProductGroupParameterGroups" collection
 * @method ProductGroup        setTitle()                       Sets the current record's "title" value
 * @method ProductGroup        setSlug()                        Sets the current record's "slug" value
 * @method ProductGroup        setDescription()                 Sets the current record's "description" value
 * @method ProductGroup        setPicture()                     Sets the current record's "picture" value
 * @method ProductGroup        setPictureInactive()             Sets the current record's "picture_inactive" value
 * @method ProductGroup        setMetaTitle()                   Sets the current record's "meta_title" value
 * @method ProductGroup        setMetaDescription()             Sets the current record's "meta_description" value
 * @method ProductGroup        setMetaKeywords()                Sets the current record's "meta_keywords" value
 * @method ProductGroup        setName()                        Sets the current record's "name" value
 * @method ProductGroup        setImportCode()                  Sets the current record's "import_code" value
 * @method ProductGroup        setPri()                         Sets the current record's "pri" value
 * @method ProductGroup        setParameter()                   Sets the current record's "parameter" value
 * @method ProductGroup        setBannerGroups()                Sets the current record's "BannerGroups" collection
 * @method ProductGroup        setStructureProductGroup()       Sets the current record's "StructureProductGroup" collection
 * @method ProductGroup        setProducts()                    Sets the current record's "Products" collection
 * @method ProductGroup        setProductGroupParameterGroups() Sets the current record's "ProductGroupParameterGroups" collection
 *
 * @package    jobeet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProductGroup extends BaseDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product_group');
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('slug', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 755, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 755,
             ));
        $this->hasColumn('picture', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('picture_inactive', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('meta_title', 'string', 1000, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 1000,
             ));
        $this->hasColumn('meta_description', 'string', 1000, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 1000,
             ));
        $this->hasColumn('meta_keywords', 'string', 1000, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 1000,
             ));
        $this->hasColumn('name', 'string', 300, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 300,
             ));
        $this->hasColumn('import_code', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('eventival_id', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('pri', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('parameter', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'default' => 'default',
             'length' => 255,
             ));


        $this->index('myindex', array(
             'fields' =>
             array(
              0 => 'pri',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('BannerGroupVsProductGroup as BannerGroups', array(
             'local' => 'id',
             'foreign' => 'product_group_id'));

        $this->hasMany('ProductGroupVsStructure as StructureProductGroup', array(
             'local' => 'id',
             'foreign' => 'group_id'));

        $this->hasMany('ProductVsProductGroup as Products', array(
             'local' => 'id',
             'foreign' => 'group_id'));

        $this->hasMany('ProductGroupVsParameterGroup as ProductGroupParameterGroups', array(
             'local' => 'id',
             'foreign' => 'prodgroup_id'));

        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' =>
             array(
              0 => 'name',
              1 => 'meta_title',
              2 => 'meta_description',
              3 => 'meta_keywords',
              4 => 'slug',
              5 => 'description',
             ),
             ));
        $nestedset0 = new Doctrine_Template_NestedSet();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $userid0 = new Doctrine_Template_Userid(array(
             'created' =>
             array(
              'name' => 'created_by',
              'type' => 'integer',
             ),
             'updated' =>
             array(
              'name' => 'updated_by',
              'type' => 'integer',
             ),
             ));
        $this->actAs($i18n0);
        $this->actAs($nestedset0);
        $this->actAs($timestampable0);
        $this->actAs($userid0);
    }
}