<?php

/**
 * BaseParameter
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $title
 * @property boolean $multilang
 * @property integer $group_id
 * @property string $name
 * @property string $unit_name
 * @property string $type
 * @property boolean $required
 * @property boolean $is_filter
 * @property integer $pri
 * @property ParameterGroup $ParameterGroup
 * @property Doctrine_Collection $ParameterOptions
 * @property Doctrine_Collection $ParameterProductValues
 * 
 * @method string              getTitle()                  Returns the current record's "title" value
 * @method boolean             getMultilang()              Returns the current record's "multilang" value
 * @method integer             getGroupId()                Returns the current record's "group_id" value
 * @method string              getName()                   Returns the current record's "name" value
 * @method string              getUnitName()               Returns the current record's "unit_name" value
 * @method string              getType()                   Returns the current record's "type" value
 * @method boolean             getRequired()               Returns the current record's "required" value
 * @method boolean             getIsFilter()               Returns the current record's "is_filter" value
 * @method integer             getPri()                    Returns the current record's "pri" value
 * @method ParameterGroup      getParameterGroup()         Returns the current record's "ParameterGroup" value
 * @method Doctrine_Collection getParameterOptions()       Returns the current record's "ParameterOptions" collection
 * @method Doctrine_Collection getParameterProductValues() Returns the current record's "ParameterProductValues" collection
 * @method Parameter           setTitle()                  Sets the current record's "title" value
 * @method Parameter           setMultilang()              Sets the current record's "multilang" value
 * @method Parameter           setGroupId()                Sets the current record's "group_id" value
 * @method Parameter           setName()                   Sets the current record's "name" value
 * @method Parameter           setUnitName()               Sets the current record's "unit_name" value
 * @method Parameter           setType()                   Sets the current record's "type" value
 * @method Parameter           setRequired()               Sets the current record's "required" value
 * @method Parameter           setIsFilter()               Sets the current record's "is_filter" value
 * @method Parameter           setPri()                    Sets the current record's "pri" value
 * @method Parameter           setParameterGroup()         Sets the current record's "ParameterGroup" value
 * @method Parameter           setParameterOptions()       Sets the current record's "ParameterOptions" collection
 * @method Parameter           setParameterProductValues() Sets the current record's "ParameterProductValues" collection
 * 
 * @package    jobeet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseParameter extends BaseDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('parameter');
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('multilang', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('group_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('unit_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('required', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('is_filter', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('pri', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));

        $this->setSubClasses(array(
             'ParameterSelectionSingle' => 
             array(
              'type' => 'SINGLE_OPTIONS',
             ),
             'ParameterSelectionMany' => 
             array(
              'type' => 'MANY_OPTIONS',
             ),
             'ParameterTextfield' => 
             array(
              'type' => 'TEXTFIELD',
             ),
             'ParameterTextBox' => 
             array(
              'type' => 'TEXTBOX',
             ),
             'ParameterPicture' => 
             array(
              'type' => 'PICTURE',
             ),
             'ParameterFile' => 
             array(
              'type' => 'FILE',
             ),
             'ParameterHtml' => 
             array(
              'type' => 'HTML',
             ),
             'ParameterArticle' => 
             array(
              'type' => 'ARTICLE',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ParameterGroup', array(
             'local' => 'group_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('ParameterOption as ParameterOptions', array(
             'local' => 'id',
             'foreign' => 'param_id'));

        $this->hasMany('ParameterProductValue as ParameterProductValues', array(
             'local' => 'id',
             'foreign' => 'param_id'));

        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'name',
              1 => 'unit_name',
             ),
             ));
        $timestampable0 = new Doctrine_Template_Timestampable();
        $userid0 = new Doctrine_Template_Userid(array(
             'created' => 
             array(
              'name' => 'created_by',
              'type' => 'integer',
             ),
             'updated' => 
             array(
              'name' => 'updated_by',
              'type' => 'integer',
             ),
             ));
        $this->actAs($i18n0);
        $this->actAs($timestampable0);
        $this->actAs($userid0);
    }
}