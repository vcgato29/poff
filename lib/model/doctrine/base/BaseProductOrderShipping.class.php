<?php

/**
 * BaseProductOrderShipping
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $information
 * @property string $name
 * @property integer $vatrate
 * @property string $cost
 * @property string $price_currency
 * @property integer $mass_interval_start
 * @property integer $mass_interval_end
 * @property integer $order_id
 * @property ProductOrder $ProductOrder
 * @property Doctrine_Collection $OrederedItems
 * 
 * @method string               getInformation()         Returns the current record's "information" value
 * @method string               getName()                Returns the current record's "name" value
 * @method integer              getVatrate()             Returns the current record's "vatrate" value
 * @method string               getCost()                Returns the current record's "cost" value
 * @method string               getPriceCurrency()       Returns the current record's "price_currency" value
 * @method integer              getMassIntervalStart()   Returns the current record's "mass_interval_start" value
 * @method integer              getMassIntervalEnd()     Returns the current record's "mass_interval_end" value
 * @method integer              getOrderId()             Returns the current record's "order_id" value
 * @method ProductOrder         getProductOrder()        Returns the current record's "ProductOrder" value
 * @method Doctrine_Collection  getOrederedItems()       Returns the current record's "OrederedItems" collection
 * @method ProductOrderShipping setInformation()         Sets the current record's "information" value
 * @method ProductOrderShipping setName()                Sets the current record's "name" value
 * @method ProductOrderShipping setVatrate()             Sets the current record's "vatrate" value
 * @method ProductOrderShipping setCost()                Sets the current record's "cost" value
 * @method ProductOrderShipping setPriceCurrency()       Sets the current record's "price_currency" value
 * @method ProductOrderShipping setMassIntervalStart()   Sets the current record's "mass_interval_start" value
 * @method ProductOrderShipping setMassIntervalEnd()     Sets the current record's "mass_interval_end" value
 * @method ProductOrderShipping setOrderId()             Sets the current record's "order_id" value
 * @method ProductOrderShipping setProductOrder()        Sets the current record's "ProductOrder" value
 * @method ProductOrderShipping setOrederedItems()       Sets the current record's "OrederedItems" collection
 * 
 * @package    jobeet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProductOrderShipping extends BaseDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product_order_shipping');
        $this->hasColumn('information', 'string', 3000, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 3000,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('vatrate', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('cost', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'default' => 0,
             'length' => 255,
             ));
        $this->hasColumn('price_currency', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('mass_interval_start', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('mass_interval_end', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('order_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProductOrder', array(
             'local' => 'order_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('ProductOrderItem as OrederedItems', array(
             'local' => 'id',
             'foreign' => 'order_shipping_id'));
    }
}