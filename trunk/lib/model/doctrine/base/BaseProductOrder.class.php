<?php

/**
 * BaseProductOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $public_user_id
 * @property string $order_number
 * @property string $price_currency
 * @property string $pay_in_currency
 * @property string $user_culture
 * @property boolean $is_archived
 * @property boolean $is_hidden
 * @property boolean $invoice_mailed
 * @property string $ticket
 * @property string $ip
 * @property string $buyer_email
 * @property string $title
 * @property string $notes
 * @property enum $status
 * @property clob $raw_response
 * @property enum $type
 * @property Doctrine_Collection $Products
 * @property PublicUser $PublicUser
 * @property Doctrine_Collection $ProductOrderVsProduct
 * @property Doctrine_Collection $OrederedItems
 * @property ProductOrderBilling $BillingAddress
 * @property Doctrine_Collection $Shippings
 * 
 * @method integer             getPublicUserId()          Returns the current record's "public_user_id" value
 * @method string              getOrderNumber()           Returns the current record's "order_number" value
 * @method string              getPriceCurrency()         Returns the current record's "price_currency" value
 * @method string              getPayInCurrency()         Returns the current record's "pay_in_currency" value
 * @method string              getUserCulture()           Returns the current record's "user_culture" value
 * @method boolean             getIsArchived()            Returns the current record's "is_archived" value
 * @method boolean             getIsHidden()              Returns the current record's "is_hidden" value
 * @method boolean             getInvoiceMailed()         Returns the current record's "invoice_mailed" value
 * @method string              getTicket()                Returns the current record's "ticket" value
 * @method string              getIp()                    Returns the current record's "ip" value
 * @method string              getBuyerEmail()            Returns the current record's "buyer_email" value
 * @method string              getTitle()                 Returns the current record's "title" value
 * @method string              getNotes()                 Returns the current record's "notes" value
 * @method enum                getStatus()                Returns the current record's "status" value
 * @method clob                getRawResponse()           Returns the current record's "raw_response" value
 * @method enum                getType()                  Returns the current record's "type" value
 * @method Doctrine_Collection getProducts()              Returns the current record's "Products" collection
 * @method PublicUser          getPublicUser()            Returns the current record's "PublicUser" value
 * @method Doctrine_Collection getProductOrderVsProduct() Returns the current record's "ProductOrderVsProduct" collection
 * @method Doctrine_Collection getOrederedItems()         Returns the current record's "OrederedItems" collection
 * @method ProductOrderBilling getBillingAddress()        Returns the current record's "BillingAddress" value
 * @method Doctrine_Collection getShippings()             Returns the current record's "Shippings" collection
 * @method ProductOrder        setPublicUserId()          Sets the current record's "public_user_id" value
 * @method ProductOrder        setOrderNumber()           Sets the current record's "order_number" value
 * @method ProductOrder        setPriceCurrency()         Sets the current record's "price_currency" value
 * @method ProductOrder        setPayInCurrency()         Sets the current record's "pay_in_currency" value
 * @method ProductOrder        setUserCulture()           Sets the current record's "user_culture" value
 * @method ProductOrder        setIsArchived()            Sets the current record's "is_archived" value
 * @method ProductOrder        setIsHidden()              Sets the current record's "is_hidden" value
 * @method ProductOrder        setInvoiceMailed()         Sets the current record's "invoice_mailed" value
 * @method ProductOrder        setTicket()                Sets the current record's "ticket" value
 * @method ProductOrder        setIp()                    Sets the current record's "ip" value
 * @method ProductOrder        setBuyerEmail()            Sets the current record's "buyer_email" value
 * @method ProductOrder        setTitle()                 Sets the current record's "title" value
 * @method ProductOrder        setNotes()                 Sets the current record's "notes" value
 * @method ProductOrder        setStatus()                Sets the current record's "status" value
 * @method ProductOrder        setRawResponse()           Sets the current record's "raw_response" value
 * @method ProductOrder        setType()                  Sets the current record's "type" value
 * @method ProductOrder        setProducts()              Sets the current record's "Products" collection
 * @method ProductOrder        setPublicUser()            Sets the current record's "PublicUser" value
 * @method ProductOrder        setProductOrderVsProduct() Sets the current record's "ProductOrderVsProduct" collection
 * @method ProductOrder        setOrederedItems()         Sets the current record's "OrederedItems" collection
 * @method ProductOrder        setBillingAddress()        Sets the current record's "BillingAddress" value
 * @method ProductOrder        setShippings()             Sets the current record's "Shippings" collection
 * 
 * @package    jobeet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProductOrder extends BaseDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product_order');
        $this->hasColumn('public_user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('order_number', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('price_currency', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('pay_in_currency', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'default' => 'EUR',
             'length' => 255,
             ));
        $this->hasColumn('user_culture', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'default' => 'et',
             'length' => 255,
             ));
        $this->hasColumn('is_archived', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('is_hidden', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('invoice_mailed', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('ticket', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('ip', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('buyer_email', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('notes', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'new',
              1 => 'paid',
              2 => 'canceled',
             ),
             ));
        $this->hasColumn('raw_response', 'clob', null, array(
             'type' => 'clob',
             'notnull' => false,
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'seb',
              1 => 'swed',
              2 => 'sampo',
              3 => 'nordea',
             ),
             ));

        $this->setSubClasses(array(
             'ProductOrderSeb' => 
             array(
              'type' => 'seb',
             ),
             'ProductOrderSwed' => 
             array(
              'type' => 'swed',
             ),
             'ProductOrderNordea' => 
             array(
              'type' => 'nordea',
             ),
             'ProductOrderSampo' => 
             array(
              'type' => 'sampo',
             ),
             'ProductOrderPayPal' => 
             array(
              'type' => 'paypal',
             ),
             'ProductOrderVisa' => 
             array(
              'type' => 'visa',
             ),
             'ProductOrderMasterCard' => 
             array(
              'type' => 'master',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Product as Products', array(
             'refClass' => 'ProductOrderVsProduct',
             'local' => 'order_id',
             'foreign' => 'product_id'));

        $this->hasOne('PublicUser', array(
             'local' => 'public_user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('ProductOrderVsProduct', array(
             'local' => 'id',
             'foreign' => 'order_id'));

        $this->hasMany('ProductOrderItem as OrederedItems', array(
             'local' => 'id',
             'foreign' => 'order_id'));

        $this->hasOne('ProductOrderBilling as BillingAddress', array(
             'local' => 'id',
             'foreign' => 'order_id'));

        $this->hasMany('ProductOrderShipping as Shippings', array(
             'local' => 'id',
             'foreign' => 'order_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}