<?php

/**
 * BaseProductOrderItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $order_id
 * @property string $price_currency
 * @property integer $product_id
 * @property integer $mass
 * @property integer $vatrate
 * @property string $code
 * @property integer $order_shipping_id
 * @property string $name
 * @property integer $quanity
 * @property float $price
 * @property ProductOrder $ProductOrder
 * @property Product $Product
 * @property ProductOrderShipping $ProductOrderShipping
 * 
 * @method integer              getOrderId()              Returns the current record's "order_id" value
 * @method string               getPriceCurrency()        Returns the current record's "price_currency" value
 * @method integer              getProductId()            Returns the current record's "product_id" value
 * @method integer              getMass()                 Returns the current record's "mass" value
 * @method integer              getVatrate()              Returns the current record's "vatrate" value
 * @method string               getCode()                 Returns the current record's "code" value
 * @method integer              getOrderShippingId()      Returns the current record's "order_shipping_id" value
 * @method string               getName()                 Returns the current record's "name" value
 * @method integer              getQuanity()              Returns the current record's "quanity" value
 * @method float                getPrice()                Returns the current record's "price" value
 * @method ProductOrder         getProductOrder()         Returns the current record's "ProductOrder" value
 * @method Product              getProduct()              Returns the current record's "Product" value
 * @method ProductOrderShipping getProductOrderShipping() Returns the current record's "ProductOrderShipping" value
 * @method ProductOrderItem     setOrderId()              Sets the current record's "order_id" value
 * @method ProductOrderItem     setPriceCurrency()        Sets the current record's "price_currency" value
 * @method ProductOrderItem     setProductId()            Sets the current record's "product_id" value
 * @method ProductOrderItem     setMass()                 Sets the current record's "mass" value
 * @method ProductOrderItem     setVatrate()              Sets the current record's "vatrate" value
 * @method ProductOrderItem     setCode()                 Sets the current record's "code" value
 * @method ProductOrderItem     setOrderShippingId()      Sets the current record's "order_shipping_id" value
 * @method ProductOrderItem     setName()                 Sets the current record's "name" value
 * @method ProductOrderItem     setQuanity()              Sets the current record's "quanity" value
 * @method ProductOrderItem     setPrice()                Sets the current record's "price" value
 * @method ProductOrderItem     setProductOrder()         Sets the current record's "ProductOrder" value
 * @method ProductOrderItem     setProduct()              Sets the current record's "Product" value
 * @method ProductOrderItem     setProductOrderShipping() Sets the current record's "ProductOrderShipping" value
 * 
 * @package    jobeet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProductOrderItem extends BaseDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product_order_item');
        $this->hasColumn('order_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('price_currency', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('product_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('mass', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('vatrate', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('code', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('order_shipping_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('quanity', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('price', 'float', null, array(
             'type' => 'float',
             'notnull' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProductOrder', array(
             'local' => 'order_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Product', array(
             'local' => 'product_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'SET NULL'));

        $this->hasOne('ProductOrderShipping', array(
             'local' => 'order_shipping_id',
             'foreign' => 'id'));
    }
}