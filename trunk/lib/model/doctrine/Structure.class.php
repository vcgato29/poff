<?php

/**
 * Structure
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    jobeet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Structure extends BaseStructure
{
	public $focus;

	public function getMyModules(){
		$result = array();


		# get first parent from whom you are inheriting
		$cur = $this;
		while( $cur->getInheritsLayout() ){
			$cur = $cur->getParent();
		}


		$placeHolders = $cur->getPlaceholders();


  		foreach( $placeHolders as $placeHolder ){
  			$result[$placeHolder->name][$placeHolder->id] = $placeHolder->getFrontendModule();
  		}


  		return $result;
	}


	public function isPermittedForUser( $userObj, $permLevel )
	{
//		$permission = $this->getPermissionForUserGroup( $userObj->getGuardUser()->getAdminUserGroupId() );
//
//		return ((int)$permission & (int)$permLevel) == (int)$permLevel;
		return true;

	}


	public function getStructureChilds(){

   		$children = Doctrine::getTable('Structure')->getNodeChildren($this->id);
   		$array = array();

   		if( !empty( $children ) && is_object( $children ) )
   			$array = $children;

   		return $array;


	}

  public function populateWithChildren( &$result, $selectedElementIDs, $checkPermission = false, $permission = false, $userObj = null ){

  	if( in_array( $this->id, $selectedElementIDs )  ){
  		$childs = $this->getStructureChilds();
  		if( !empty( $childs ) ){

  			foreach( $childs as $child ){
  				$contentArray = $child->toArray();
  				$contentArray['permitted'] = $checkPermission ? $child->isPermittedForUser( $userObj, $permission ) : true;
  				$result['childs'][$child['id']] = $contentArray;
  				$child->populateWithChildren(  $result['childs'][$child['id']], $selectedElementIDs, $checkPermission, $permission, $userObj );
  			}
  		}

  	}

  }


	public function getStructureParents(){
		$tree = $this->getNode()->getAncestors();
   		return $tree;
	}

	public function getStructureParentsIDs(){

		$ar = $this->getStructureParents();

		$result = array();
		if( !empty( $ar ) )
			foreach( $ar as $elem ){
				$result[] = $elem['id'];
			}
   		return $result;
	}



	public function preSave( $obj ){
		//$this->setDefaultPriority();
	}



	public function setDefaultPriority(){

		if( $this->pri === 0 ){
			$p = $this->getNode()->getSiblings();
			if( count( $p ) > 0  )
				foreach( $p as $sibling ){
					$this->pri = $this->pri <= $sibling->pri ? $sibling->pri + 1 : $this->pri;
				}
		}

	}


	public function getSameLevelNodes()
	{
		return $siblings = $this->getNode()->getSiblings();
	}


	/* used when need to copy nodes */
	public function insertAsLastChildOfRecursively( $parentNode )
	{

		//Doctrine_Manager::getInstance()->setAttribute(Doctrine::ATTR_USE_DQL_CALLBACKS, true);

		$this->prepareToInsert( $parentNode );
		$this->insertRecursively( $parentNode );

	}

	public function insertRecursively( $parentNode )
	{
		$this->getNode()->insertAsLastChildOf($parentNode);
		foreach( $this->getStructureChilds() as $child ){
			$child->insertRecursively( $this );
		}
		$this->save();
	}


	public function prepareToInsert( $parentNode )
	{
		$this->lft = null;
		$this->rgt = null;
		$this->level = null;
		//$this->setSlug( $this->slug . time() );
		$this->setParentid( $parentNode->id );
		$this->setLang( $parentNode->getLang() );

		//$this->state('LOCKED');
		$this->save();
		try{

		}catch(Exception $x){
			echo $this->state();
			echo $this->id;
			exit;
		}
		foreach( $this->getStructureChilds() as $child ){
			$child->prepareToInsert( $this );
		}
	}

	/* used when need to move nodes */
	public function moveAsLastChildOfRecursively( $parentNode )
	{

		$this->setParentid( $parentNode->id );
		$this->setLang( $parentNode->getLang() );
		$this->setPri( 0 );
		$this->getNode()->moveAsLastChildOf( $parentNode );
		$this->save();
		foreach( $this->getStructureChilds() as $child ){
			$child->moveAsLastChildOfRecursively( $this );
		}

	}

	public function getPermissionForUserGroup( $userGroup ){

//		$res = Doctrine_Query::create()
//   			 ->select('UserGroupPermissionOnStructure( s.id , ?) as permission' )
//   			 ->from('Structure s')
//   			 ->where('s.id= ?' , array( $userGroup, $this->id ) )
//   			 ->fetchOne();
//
//		return $res['permission'];
		return 7;
	}


	public function getPlaceholders()
	{
		return Doctrine::getTable('Placeholder')->getRecordsByStructureOrdered( $this->id );

	}


	public function getCustomForm()
	{
		return new StructureForm( $this );
	}

	public function isChildrenOf( $curNode ){
		return ( $this['lft'] < $curNode['lft'] && $this['rgt'] > $curNode['rgt'] );
	}

	public function onSameBranchAs( $curNode ){
		return $this->isChildrenOf($curNode) || $curNode['id'] == $this['id'];
	}

	public static function getFormAvailableTypes(){
		return array( 	'standard' => 'Kaust',
						 );
	}

	public static function getFormAvailableParameters(){

		return array( 	'none' => 'None',
						'index' => 'Homepage',
						'productcatalog' => 'Product catalog',
						'footer' => 'Footer',
						'news' => 'News holder',
						'archive' => 'Archive',
						'festival_list' => 'Festival List',
						'festival_dropdown' => 'Festival Dropdown');
	}


	public function nodeLayout(){
		if( $this->getInheritsLayout()  && $this->getNode()->hasParent() ){
			return $this->getNode()->getParent()->nodeLayout();
		}else{
			return $this->_get('layout');
		}


	}

	public function getUrl(){
		return $this->slug;
	}


	public function getUrlComponent( $n ){

			$ar = $this->getNode()->getAncestors()->toArray();
		if( !empty( $ar[$n-1] ) && !isset( $ar[$n] ) )
			return $this->slug;
		else if( isset( $ar[$n] ) )
			return $ar[$n]['slug'];
	}


	public function getP0(){
		return $this->getLang();
	}


	public function getP1(){
		return $this->getUrlComponent( 2 );
	}

	public function getP2(){
		return $this->getUrlComponent( 3 );
	}

	public function getP3(){
		return $this->getUrlComponent( 4 );
	}

	public function getP4(){
		return $this->getUrlComponent( 5 );
	}

	public function getP5(){
		return $this->getUrlComponent( 6 );
	}



	// INDEXING for search
	public function postSave($evt = null){
		Doctrine::getConnectionByTableName($this->getTable()->getTableName())->setAttribute(Doctrine_Core::ATTR_HYDRATE_OVERWRITE, false); // we do not want to refresh our records
		$this->updateLuceneIndex();
		Doctrine::getConnectionByTableName($this->getTable()->getTableName())->setAttribute(Doctrine_Core::ATTR_HYDRATE_OVERWRITE, true);
	}


	public function updateLuceneIndex(){

		//delete existing entries
		$index = $this->getTable()->getLuceneIndex();

		// remove existing entries
		foreach ($index->find('pk:'.$this->getId()) as $hit){
		  $index->delete($hit->id);
		}

		// create new Lucene document
		$doc = new Zend_Search_Lucene_Document();

		// store product primary key to identify it in the search results
  		$doc->addField(Zend_Search_Lucene_Field::Keyword('pk', $this->getId()));



  		// add fields to index depending on existing Translations
		$doc->addField(Zend_Search_Lucene_Field::UnStored('description', strip_tags($this->getDescription()), 'utf-8'));
		$doc->addField(Zend_Search_Lucene_Field::UnStored('content', strip_tags($this->getContent()), 'utf-8'));
		$doc->addField(Zend_Search_Lucene_Field::UnStored('pageTitle', $this->getPageTitle(), 'utf-8'));
		$doc->addField(Zend_Search_Lucene_Field::UnStored('title', $this->getTitle(), 'utf-8'));

		// add product to the index
		$index->addDocument($doc);
		$index->commit();

	}

}