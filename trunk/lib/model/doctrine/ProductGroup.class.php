<?php

/**
 * ProductGroup
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    jobeet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class ProductGroup extends BaseProductGroup
{
	public function getSameLevelNodes()
	{
		return $siblings = $this->getNode()->getSiblings();
	}
	
	
	public function buildLink( $lang = 'est' ){
		
		if( $this->level <= 1 ){		
			//$z = Doctrine::getTable('Structure')->findOneByLangAndParameter( $lang, 'shop' );
			$link = '/' . self::getRequestParameterName() . '/' . $this->slug;
			return $link;
		}else{
			return $this->getNode()->getParent()->buildLink( $lang );
		}
			
	}

	public function updateParameterGroupConnections( $connections ){
		$this->deleteParameterGroupConnections();
		foreach( $connections as $rel ){
			$obj = new ProductGroupVsParameterGroup();
			$obj->fromArray(array( 'prodgroup_id' => $this->id, 'paramgroup_id' => $rel  ));
			$obj->save();
		}
		
	}


	public function updateStructureConnections($connections){
		$this->deleteStructureConnections();

		foreach( $connections as $rel ){
			$obj = new ProductGroupVsStructure();
			$obj->fromArray( array( 'structure_id' => $rel, 'group_id' => $this->id ) );
			$obj->save();
		}
		
	}

	public function deleteStructureConnections(){
	    foreach($this->StructureProductGroup as $rel)
		$rel->delete();
	}
	
	
	public function getAssociatedProducts(){
		return $this->getAssociatedProductsQuery()
                        ->execute();
	}

	public function getAssociatedProductsQuery(){
		return Doctrine::getTable('Product')->getAssociatedToCategoryProductsQuery( $this->getId() );
	}
	
	
	public function deleteParameterGroupConnections(){
		foreach( $this->getProductGroupParameterGroups() as $rel ){
			$rel->delete();
		}
	}
	
	public function saveJustImported(){
		return $this->getNode()->insertAsLastChildOf( $this->getTable()->getRoot() );
	}
	
	public function getViewTitle(){
		if( !$this->getName() )
			return $this->getTitle();
		
		return $this->getName();
	}
	
	
	public function preSave($evt = null){
		Doctrine::getConnectionByTableName($this->getTable()->getTableName())->setAttribute(Doctrine_Core::ATTR_HYDRATE_OVERWRITE, false); // we do not want to refresh our records
		$this->updateSlug();
		Doctrine::getConnectionByTableName($this->getTable()->getTableName())->setAttribute(Doctrine_Core::ATTR_HYDRATE_OVERWRITE, true);
		return parent::preSave($evt);
	}
	
	
	public function updateSlug(){
		foreach($this->Translation as $index => $val){
			if(!$val['name'])continue;
			$newSlug = $val['slug'] ? $val['slug'] : oxtSluggableTranslit::urlize($val['name']);
			$origSlug = $newSlug;
			$c = 1;
			$col = $this->getTable()->findI18nSlug($newSlug);
			while($col->count() >= 1 ){
				if($col->count()==1 && $col->getFirst()->getId() == $this->getId())break;
				
				$newSlug = $origSlug . '-' .($c++);
				$col = $this->getTable()->findI18nSlug($newSlug);
			}
			
			$val['slug'] = $newSlug;
		}
	}
	
	
//	public static function getRequestParameterName(){
//		return 'g';
//	}
	

}